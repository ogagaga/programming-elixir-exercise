bash-3.2$ iex
Erlang/OTP 19 [erts-8.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

Interactive Elixir (1.3.4) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> fragment =  quote do: IO.puts("hello")
{{:., [], [{:__aliases__, [alias: false], [:IO]}, :puts]}, [], ["hello"]}
iex(2)> Code.eval_quoted fragment
hello
{:ok, []}
iex(3)> fragment = quote do: IO.puts(var!(a)) 
{{:., [], [{:__aliases__, [alias: false], [:IO]}, :puts]}, [],
 [{:var!, [context: Elixir, import: Kernel], [{:a, [], Elixir}]}]}
iex(4)> Code.eval_quoted fragment, [a: "cat"]
cat
{:ok, [a: "cat"]}
iex(5)> 
nil
iex(6)> fragment = Code.string_to_quoted("defmodule A do def b(c) do c+1 end end")
{:ok,
 {:defmodule, [line: 1],
  [{:__aliases__, [counter: 0, line: 1], [:A]},
   [do: {:def, [line: 1],
     [{:b, [line: 1], [{:c, [line: 1], nil}]},
      [do: {:+, [line: 1], [{:c, [line: 1], nil}, 1]}]]}]]}}
iex(7)> Macro.to_string(fragment)
"{:ok, defmodule(A) do\n  def(b(c)) do\n    c + 1\n  end\nend}"
iex(8)>    
nil
iex(9)> Code.eval_string("[a, a*b, c]", [a: 2, b: 3, c: 4])
{[2, 6, 4], [a: 2, b: 3, c: 4]}

